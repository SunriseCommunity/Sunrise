// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sunrise.Shared.Database;

#nullable disable

namespace Sunrise.Shared.Database.Migrations
{
    [DbContext(typeof(SunriseDbContext))]
    [Migration("20250704053256_AddNewTablesForScoreDataRowMigration")]
    partial class AddNewTablesForScoreDataRowMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Beatmap.BeatmapHype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BeatmapSetId")
                        .HasColumnType("int");

                    b.Property<int>("Hypes")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("BeatmapSetId", "Hypes");

                    b.HasIndex("BeatmapSetId", "UserId")
                        .IsUnique();

                    b.ToTable("beatmap_hype");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Beatmap.CustomBeatmapStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BeatmapHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("BeatmapSetId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapHash");

                    b.HasIndex("BeatmapSetId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("custom_beatmap_status");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Events.EventBeatmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BeatmapSetId")
                        .HasColumnType("int");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<string>("JsonData")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapSetId");

                    b.HasIndex("ExecutorId");

                    b.ToTable("event_beatmap");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Events.EventUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("EventType", "Ip");

                    b.HasIndex("EventType", "UserId");

                    b.ToTable("event_user");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Medal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext");

                    b.Property<byte?>("GameMode")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("FileId");

                    b.HasIndex("GameMode");

                    b.ToTable("medal");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.MedalFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("medal_file");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("UserId");

                    b.ToTable("restriction");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Scores.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Accuracy")
                        .HasColumnType("double");

                    b.Property<string>("BeatmapHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("BeatmapId")
                        .HasColumnType("int");

                    b.Property<int>("BeatmapStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClientTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Count100")
                        .HasColumnType("int");

                    b.Property<int>("Count300")
                        .HasColumnType("int");

                    b.Property<int>("Count50")
                        .HasColumnType("int");

                    b.Property<int>("CountGeki")
                        .HasColumnType("int");

                    b.Property<int>("CountKatu")
                        .HasColumnType("int");

                    b.Property<int>("CountMiss")
                        .HasColumnType("int");

                    b.Property<byte>("GameMode")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsScoreable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<int>("Mods")
                        .HasColumnType("int");

                    b.Property<string>("OsuVersion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Perfect")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("PerformancePoints")
                        .HasColumnType("double");

                    b.Property<int?>("ReplayFileId")
                        .HasColumnType("int");

                    b.Property<string>("ScoreHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubmissionStatus")
                        .HasColumnType("int");

                    b.Property<long>("TotalScore")
                        .HasColumnType("BIGINT");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WhenPlayed")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapHash");

                    b.HasIndex("ReplayFileId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "BeatmapId");

                    b.HasIndex("UserId", "SubmissionStatus", "BeatmapStatus");

                    b.HasIndex("BeatmapId", "IsScoreable", "IsPassed", "SubmissionStatus");

                    b.HasIndex("GameMode", "SubmissionStatus", "BeatmapStatus", "WhenPlayed");

                    b.ToTable("score");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Scores.ScoreHits", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Count100")
                        .HasColumnType("int");

                    b.Property<int>("Count300")
                        .HasColumnType("int");

                    b.Property<int>("Count50")
                        .HasColumnType("int");

                    b.Property<int>("CountGeki")
                        .HasColumnType("int");

                    b.Property<int>("CountKatu")
                        .HasColumnType("int");

                    b.Property<int>("CountMiss")
                        .HasColumnType("int");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("score_hits");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Scores.ScoreMetadata", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClientTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OsuVersion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ScoreHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ScoreHash");

                    b.ToTable("score_metadata");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<short>("Country")
                        .HasColumnType("smallint");

                    b.Property<byte>("DefaultGameMode")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<DateTime>("LastOnlineTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Passhash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Privilege")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SilencedUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatus");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserFavouriteBeatmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BeatmapSetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "BeatmapSetId");

                    b.ToTable("user_favourite_beatmap");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnerId", "Type");

                    b.ToTable("user_file");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountA")
                        .HasColumnType("int");

                    b.Property<int>("CountB")
                        .HasColumnType("int");

                    b.Property<int>("CountC")
                        .HasColumnType("int");

                    b.Property<int>("CountD")
                        .HasColumnType("int");

                    b.Property<int>("CountS")
                        .HasColumnType("int");

                    b.Property<int>("CountSH")
                        .HasColumnType("int");

                    b.Property<int>("CountX")
                        .HasColumnType("int");

                    b.Property<int>("CountXH")
                        .HasColumnType("int");

                    b.Property<byte>("GameMode")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "GameMode")
                        .IsUnique();

                    b.ToTable("user_grades");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserInventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ItemType")
                        .IsUnique();

                    b.ToTable("user_inventory_item");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserMedals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MedalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_medals");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discord")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Interest")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("Playstyle")
                        .HasColumnType("int");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Twitch")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_metadata");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Relation")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TargetId");

                    b.HasIndex("UserId", "TargetId");

                    b.ToTable("user_relationship");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Accuracy")
                        .HasColumnType("double");

                    b.Property<long?>("BestCountryRank")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("BestCountryRankDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("BestGlobalRank")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("BestGlobalRankDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("GameMode")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<double>("PerformancePoints")
                        .HasColumnType("double");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<int>("PlayTime")
                        .HasColumnType("int");

                    b.Property<long>("RankedScore")
                        .HasColumnType("BIGINT");

                    b.Property<int>("TotalHits")
                        .HasColumnType("int");

                    b.Property<long>("TotalScore")
                        .HasColumnType("BIGINT");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "GameMode")
                        .IsUnique();

                    b.ToTable("user_stats");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserStatsSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("GameMode")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("SnapshotsJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "GameMode");

                    b.ToTable("user_stats_snapshot");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Beatmap.BeatmapHype", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Beatmap.CustomBeatmapStatus", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Events.EventBeatmap", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Events.EventUser", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Medal", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.MedalFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Restriction", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Scores.Score", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.UserFile", "ReplayFile")
                        .WithMany()
                        .HasForeignKey("ReplayFileId");

                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplayFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Scores.ScoreHits", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Scores.Score", "Score")
                        .WithOne("ScoreHits")
                        .HasForeignKey("Sunrise.Shared.Database.Models.Scores.ScoreHits", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Score");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Scores.ScoreMetadata", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Scores.Score", "Score")
                        .WithOne("ScoreMetadata")
                        .HasForeignKey("Sunrise.Shared.Database.Models.Scores.ScoreMetadata", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Score");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserFavouriteBeatmap", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserFile", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany("UserFiles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserGrades", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserInventoryItem", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany("Inventory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserMedals", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserMetadata", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserRelationship", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "Target")
                        .WithMany("UserReceivedRelationships")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany("UserInitiatedRelationships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Target");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserStats", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany("UserStats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserStatsSnapshot", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany("UserStatsSnapshots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Scores.Score", b =>
                {
                    b.Navigation("ScoreHits");

                    b.Navigation("ScoreMetadata");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.User", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("UserFiles");

                    b.Navigation("UserInitiatedRelationships");

                    b.Navigation("UserReceivedRelationships");

                    b.Navigation("UserStats");

                    b.Navigation("UserStatsSnapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
